{{if index .Values.global "backupJob" "enabled" }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mongodb-backup
  {{- if .Values.global.backupJob.namespace }}
  namespace: {{ .Values.global.backupJob.namespace }}
  {{- else }}
  namespace: {{ .Release.Namespace }}
  {{- end }}
spec:
  schedule: {{ .Values.backupJob.schedule }} #Cron job runs every 1 hours
  startingDeadlineSeconds: 60
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          serviceAccountName: {{ .Values.backupJob.serviceAccount.name }}
          dnsPolicy: ClusterFirstWithHostNet
          containers:
            - name: mongodb-backup
              image: "{{ .Values.backupJob.image.name }}:{{ .Values.backupJob.image.tag }}"
              imagePullPolicy: "IfNotPresent"
              env:
                - name: DB_NAME
                  value: "mongo"
                - name:  MONGO_SERVICE_NAME
                  value: "{{ .Values.backupJob.mongoSvcName }}"               # MongoDB Service Name    
                - name:  S3_Bucket
                  value: "{{ .Values.backupJob.s3Bucket }}"                   # S3 Bucket Name
                - name: MONGODB_USERNAME
                  value: "{{ .Values.mongodb.auth.rootUser }}"                
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.mongodb.auth.existingSecret }}
                      key: mongodb-root-password                                  # Replace with the actual key in your secret
              command: ['sh', '-c',"./backup.sh"]
              securityContext:
                privileged: true
          restartPolicy: Never
          hostNetwork: true
{{- end }}